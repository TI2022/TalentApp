name: Deploy to AWS S3 + CloudFront

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Build application
      run: NODE_ENV=production npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'ap-northeast-1' }}
    
    - name: Deploy to S3
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
        S3_BUCKET=$(jq -r ".environments.$ENVIRONMENT.s3Bucket" deploy-config.json)
        
        # S3に同期（静的アセット）
        aws s3 sync out/ s3://$S3_BUCKET \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "*.html" \
          --exclude "sw.js" \
          --exclude "workbox-*.js"
        
        # HTMLファイル（短いキャッシュ）
        aws s3 sync out/ s3://$S3_BUCKET \
          --include "*.html" \
          --cache-control "public, max-age=0, must-revalidate"
        
        # Service Worker（キャッシュなし）
        aws s3 sync out/ s3://$S3_BUCKET \
          --include "sw.js" \
          --include "workbox-*.js" \
          --cache-control "public, max-age=0, no-cache, no-store, must-revalidate"
    
    - name: Invalidate CloudFront
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
        DISTRIBUTION_ID=$(jq -r ".environments.$ENVIRONMENT.cloudfrontDistributionId" deploy-config.json)
        
        if [ "$DISTRIBUTION_ID" != "null" ] && [ "$DISTRIBUTION_ID" != "" ]; then
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"
        fi
    
    - name: Deploy notification
      if: success()
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
        DOMAIN=$(jq -r ".environments.$ENVIRONMENT.domain" deploy-config.json)
        echo "✅ デプロイ完了: https://$DOMAIN"
    
    - name: Deploy failure notification
      if: failure()
      run: echo "❌ デプロイに失敗しました"

  # セキュリティチェック（オプション）
  security-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level moderate
      continue-on-error: true
